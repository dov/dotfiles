""" author: Harry.
Views for all pricing functionality - fee tables, contacts, fee calculators, ajax views....
"""
from pricing.models import *
from pricing.forms import *
from pricing.functions import *
from pricing.profiler import profile

from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth.views import login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.core import serializers
from django.core.urlresolvers import reverse
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template.context import RequestContext
try:
    import json
except:
    import simplejson as json

from django.conf import settings

#---- decorators -----
def client_user(view):
    @login_required
    @user_passes_test(lambda u: u.is_superuser or u.groups.filter(name='Client').count()>0)
    def inner(request, *args, **kwargs):
        return view(request, *args, **kwargs)
    return inner


#---- decorators -----
def client_user_or_get_legal_users_chamber(view):
    @login_required
    def inner(request, *args, **kwargs):
        if request.user.is_superuser:
            chamber = None
        elif request.user.groups.filter(name='Client').count() > 0:
            chamber = None
        else:
            chamber = request.user.chamber_set.all()[0]
        return view(request, chamber, *args, **kwargs)
    return inner


def legal_user_get_chamber_if_authorised(view):
    @login_required
    def inner(request, chamber_id, *args, **kwargs):
        chamber = get_object_or_404(Chamber, pk=chamber_id)
        if chamber.user == request.user or request.user.is_superuser:
            return view(request, chamber, *args, **kwargs)
        else:
            return HttpResponseRedirect(reverse(login))
    return inner

#---------------standard views------------------------

#@profile("fees.prof")
@client_user_or_get_legal_users_chamber
def typed_fees(request,chamber, manager=0):
    """ main view for fees table,
    optionally filtered with a fee_type parameter
    processes GET data, including selections from dropdowns form
    plus sort and pagination requests
    """
    manager = Fee.typed_manager(manager)
    if chamber:
        manager.add_filter(dict(chamber=chamber))

    filter_table = FilterTable(
            model=Fee, model_manager=manager,
            exclude_irrelevant_fields=True,
            form_field_names=FEE_PARAMETER_NAMES,
    )

    filter_table.process_html_request(request, pagination_threshold=100)

    return render_to_response(
            'pricing/typed_fees.html',
            {'filter_table':filter_table},
            context_instance=RequestContext(request)
    )


@client_user_or_get_legal_users_chamber
def chamber_contacts(request, chamber):
    """
    main view for chamber contacts page.
    uses filtertable, restricted to single chamber if appropriate
    """
    filter_table = ContactsTable(chamber)
    if request.method =='GET':
        filter_table.process_html_request(request)

    return render_to_response('pricing/chamber_contacts.html', {
        'filter_table': filter_table,
    },context_instance=RequestContext(request) )


@login_required
def chamber_view(request,chamber_id,feecalc_id=0, seniority_id=0):
    """chamber and corresponding barristers
    3 possible use cases:  either show all barristers,
    or show all barristers that match a particular invoice
    or show all barristers of a particular seniority
    """
    chamber = get_object_or_404(Chamber, pk=chamber_id)
    if request.user.groups.filter(name='Legal'):
        if feecalc_id or seniority_id or chamber.user != request.user:
            return HttpResponseRedirect(reverse(login))
    try:
        chamber_contacts = Chamber_Contacts.objects.get(chamber=chamber)
    except Chamber_Contacts.DoesNotExist:
        return render_to_response('pricing/chamber_view.html', {
            'chamber': chamber,
            'contacts': None,
        },
        context_instance=RequestContext(request)
        )

    panels = Panel.objects.filter(fee__chamber=chamber).distinct()

    #get barristers if appropriate
    if feecalc_id:
        fee_calc = get_object_or_404(SavedFeeCalculation, pk=feecalc_id)
        fee_calc_lines = SavedFeeCalculatorLine.objects.filter(parent=fee_calc)
        seniorities = set( [l.fee.seniority for l in fee_calc_lines]  )
        panels = set( [l.fee.framework_panel for l in fee_calc_lines] )
        barristers = Barrister.objects.filter(chamber=chamber,panels__in=panels,seniority__in=seniorities).distinct()
        for_invoice = fee_calc
        for_seniority = False

    elif seniority_id:
        seniority = get_object_or_404(Seniority, pk=seniority_id)
        barristers = Barrister.objects.filter(chamber=chamber,seniority=seniority).distinct()
        for_seniority = seniority
        for_invoice=False

    else:
        barristers = Barrister.objects.filter(chamber=chamber)
        for_invoice = False
        for_seniority = False

    #create details table
    table_headers = []
    table_contents = []
    for fieldname in fieldNamesOf(Chamber_Contacts):
        field = fieldOf(Chamber_Contacts, fieldname)
        table_headers.append(verbose_name_of(field))

        val = getattr(chamber_contacts,field.name)
        if val:
            if type(val)==type(u'string'):
                if not val.find('www')==-1 :
                    table_contents+=['<a href="http://%s">%s</a>'%(val,val)]
                elif not val.find('@')==-1 :
                    table_contents+=['<a href="mailto:%s">%s</a>'%(val,val)]
                else:
                    table_contents+=[val]
            else:
                table_contents+=[val]
        else:
            table_contents+=['']

    details_table = zip(table_headers,table_contents)

    return render_to_response('pricing/chamber_view.html', {
        'for_invoice': for_invoice,
        'for_seniority': for_seniority,
        'chamber': chamber,
        'contacts': chamber_contacts,
        'details_table': details_table,
        'panels': panels,
        'barristers': barristers,
        }, context_instance=RequestContext(request)
    )


@client_user_or_get_legal_users_chamber
def barristers(request, chamber):
    """
    main view for barristers names. similar to fixed fees, defines a form,
    processes its contents, applies any sort, then passes thru the form and
    a paginated objects list
    """
    filter_table = BarristersTable(chamber)

    if request.method =='GET':
        filter_table.process_html_request(request)

    return render_to_response('pricing/barristers.html', {
        'filter_table': filter_table,
        },context_instance=RequestContext(request)
    )


def home(request):
    form = AuthenticationForm()
    return render_to_response('pricing/home.html',{
             'login_form':form,
             'site_name':settings.SITE_NAME,
            }, context_instance=RequestContext(request)
    )


def definitions(request):
    worktypes = WorkType.objects.all()
    professional_types = ProfessionalType.objects.all()
    return render_to_response('pricing/worktype_definitions.html', {
        'professional_types': professional_types,
        'worktypes': worktypes,
        }, context_instance=RequestContext(request)
    )

def worktype_definition(request,twork_id):
    worktype = get_object_or_404(WorkType,pk=twork_id)
    return render_to_response('pricing/worktype.html', {
        'worktype': worktype,
        }, context_instance=RequestContext(request)
    )

@client_user
def appointments(request):
    lawyer_types = ProfessionalType.objects.all()

    all_chambers = Chamber.objects.all()
    for f in all_chambers:
        f.panels = Panel.objects.filter(fee__chamber=f).distinct()

    all_panels = Panel.objects.all()
    for p in all_panels:
        p.chambers = Chamber.objects.filter(fee__framework_panel=p).distinct()

    return render_to_response('pricing/appointments.html', {
        'all_chambers':all_chambers,
        'lawyer_types': lawyer_types,
        'all_panels':all_panels,
        }, context_instance=RequestContext(request)
    )

@client_user
def average_fees(request):
    lawyer_types = ProfessionalType.objects.all()
    fee_types = FeeType.objects.all()
    panels = Panel.objects.all()
    return render_to_response('pricing/average_fees.html', {
        'lawyer_types': lawyer_types,
        'fee_types': fee_types,
        'panels': panels,
        }, context_instance=RequestContext(request)
    )


@client_user
def panel_average_fees(request, panel_id, fee_type_id):
    panel = get_object_or_404(Panel, pk=panel_id)
    professional_type = panel.professional_type
    is_solicitors = panel.professional_type.id == SOLICITORS
    fee_type = get_object_or_404(FeeType, pk=fee_type_id, professional_type=professional_type)
    seniorities = Seniority.objects.filter(professional_type=professional_type)
    chambers = Chamber.objects.filter(
                    fee__framework_panel=panel,
                    fee__fee_type=fee_type
                ).distinct()
    averages = {}
    scores = {}
    def get_average_fees_for(chamber, seniority=None):
        fees = Fee.objects.filter(
                chamber=chamber,
                fee_type=fee_type,
                framework_panel=panel,
                fee__isnull=False,
        )
        if professional_type.id == SOLICITORS:
            fees = fees.filter(
                    type_of_work=WorkType.objects.get(
                        professional_type__id=SOLICITORS,
                        name__icontains='general advice'
                    )
            )
        if seniority:
            fees = fees.filter(
                seniority=seniority
            )
        if fees:
           return sum(f.fee for f in fees)/len(fees)
        else:
            return 'N/A'


    for chamber in chambers:
        averages[chamber] = {}
        scores[chamber] = {}
        averages[chamber]['all'] = get_average_fees_for(chamber)
        for seniority in seniorities:
            averages[chamber][seniority] = get_average_fees_for(chamber, seniority)
        if is_solicitors:
            try:
                ms = MethodStatement.objects.get(
                    template__framework_panel=panel,
                    fee_calculation__chamber=chamber
                )
                scores[chamber]['method statement'] = ms.score
            except MethodStatement.DoesNotExist:
                scores[chamber]['method statement'] = 'N/A'

    if is_solicitors:
        min_average = min(averages[c]['all'] for c in chambers)
        max_average = max(averages[c]['all'] for c in chambers)

        def score(avg):
            if avg == 'N/A':
                return avg
            score = 4 + 4 * (max_average - avg) / (max_average - min_average)
            assert score <= 8
            return score

        for chamber in chambers:
            scores[chamber]['fees'] = score(averages[chamber]['all'])
            if scores[chamber]['fees'] == 'N/A' or scores[chamber]['method statement'] == 'N/A':
                scores[chamber]['combined'] = 'N/A'
            else:
                scores[chamber]['combined'] = scores[chamber]['fees'] + scores[chamber]['method statement']

    if is_solicitors:
        sorted_chambers = sorted(
                chambers,
                key=lambda c : scores[c]['combined'],
                reverse=True
        )
        for chamber in chambers:
            if scores[chamber]['method statement'] == 'N/A':
                sorted_chambers.remove(chamber)
    else:
        sorted_chambers = sorted(chambers, key=lambda c : averages[c]['all'])
    return render_to_response('pricing/panel_average_fees.html', {
            'panel': panel,
            'fee_type': fee_type,
            'seniorities': seniorities,
            'sorted_chambers': sorted_chambers,
            'averages':averages,
            'scores':scores,
        }, context_instance=RequestContext(request)
    )



@client_user
def parameter_details(request,parameter='', parameter_id=0 ):
    rows = {}
    form = MyModelForm(model=Fee, model_manager=Fee.typed_manager(0))
    table_headers = form.table_headers()

    if parameter: siblings = modelOf(parameter).objects.all()
    else: siblings = False

    for th,__ in table_headers:
        if parameter in FEE_PARAMETER_NAMES:
            rows[th] = modelOf(th).objects.filter(makeQQuery({parameter:parameter_id},'fee')).distinct()
            parameter_verbose = modelOf(parameter).VERBOSE_NAME
            parameter_name = modelOf(parameter).objects.get(pk=parameter_id).name
        else:
            rows[th] = modelOf(th).objects.all().distinct()
            parameter_verbose = 'All'
            parameter_name = 'All'
    table_rows_index = range(max([len(rows[k]) for k in rows]))
    return render_to_response('pricing/parameter.html', {
        'parameter': parameter,
        'parameter_id':parameter_id,
        'siblings': siblings,
        'table_headers':table_headers,
        'parameter_verbose': parameter_verbose,
        'parameter_name': parameter_name,
        'table_rows_index':table_rows_index,
        'rows': rows,
        }, context_instance=RequestContext(request)
    )


@client_user_or_get_legal_users_chamber
def fee_calculator_new(request, chamber):
    if request.method == 'POST':
        ffs = FeeCalculatorFormSet(chamber=chamber, data=request.POST)
        #if ffs.is_valid():
        ffs.processFormSet()
        ffs.updateDropDowns()
        if request.POST.has_key('view_as_fc'):
            nu_post_data = request.POST.copy()
            for k in nu_post_data.keys():
                if k.find('chamber')>0:
                    del nu_post_data[k]
            request.POST = nu_post_data
            return fee_comparison_new(request)

    else:
        ffs = FeeCalculatorFormSet(chamber=chamber)

    return render_to_response('pricing/fee_calculator.html', {
        'formset': ffs,
        'chamber_user': not (chamber is None)
    },
    context_instance=RequestContext(request)
)


def _process_feecomp_parent_form(request):
    """returns a form with the info from the POST request"""
    parent_post_dict = request.POST.copy()
    for k in parent_post_dict.keys():
        if not k.startswith('parent-'):
            del parent_post_dict[k]
    return FeeComparisonParentForm(prefix='parent',data=parent_post_dict)


@client_user
def fee_calculation_view(request, fc_id):
    if request.method == 'GET' :
        feecalc = get_object_or_404(SavedFeeCalculation,pk=fc_id)
        lines = SavedFeeCalculatorLine.objects.filter(parent=feecalc)
        #try:
        #    related_comparison = SavedFeeComparison.objects.get(fee_calculations=feecalc)
        #except (ObjectDoesNotExist,MultipleObjectsReturned):
        #    related_comparison = False
        related_comparison = feecalc.fee_comparison

    return render_to_response('pricing/fee_calculation_view.html',{
        'feecalc':feecalc,
        'lines':lines,
        'related_comparison':related_comparison,
    },
    context_instance=RequestContext(request)
)



@client_user
def fee_comparison_new(request):
    #TODO: DRY
    print 'fee comp'
    if request.method == 'GET':
        print 'fee comp get'
        #empty GET request, return empty forms
        parent_form = FeeComparisonParentForm(prefix='parent')
        ffs = FeeComparisonFormSet()

    elif request.method == 'POST':
        print 'fee comp post'
        #case: go button on individual line pressed. validate formset & update dropdowns
        ffs = FeeComparisonFormSet(data=request.POST)
        ffs.processFormSet()
        print 'printing form 0'
        print ffs.forms[0].as_p()
        print ffs.forms[0].fields['level_of_court'].choices
        ffs.updateDropDowns()
        print ffs.forms[0].fields['level_of_court'].choices

        #now process parent form
        parent_form =_process_feecomp_parent_form(request)

        if request.POST.has_key('save-fc'):
        #case we want to save the fee comparison
            if parent_form.is_valid() and ffs.is_valid():
                fee_comparison = parent_form.save()
                fee_comparison = ffs.save(fee_comparison)
                #parent_fc = parent_form.save()
                #saved_comparison = ffs.save(parent_fc)
                return HttpResponseRedirect(reverse(
                    'pricing.views.fee_comparison_view',
                    args=(fee_comparison.id,)))

    return render_to_response('pricing/fee_comparison_new_setup.html', {
        'parent_form': parent_form,
        'lines_formset': ffs,
    },
    context_instance=RequestContext(request)
)

@client_user
def fee_comparison_view(request, fc_id):
    fee_comparison = get_object_or_404(SavedFeeComparison,pk=fc_id)
    lines = SavedFeeComparisonLine.objects.filter(parent=fee_comparison)
    fee_calculations = SavedFeeCalculation.objects.filter(fee_comparison=fee_comparison)
    return render_to_response('pricing/fee_comparison_view.html', {
        'fee_comparison': fee_comparison,
        'fee_calculations': fee_calculations,
        'lines': lines,
    },
    context_instance=RequestContext(request)
)

@client_user
def fee_comparisons_list(request):
    fee_comparisons = SavedFeeComparison.objects.all()

    return render_to_response('pricing/fee_comparisons_list.html', {
        'fee_comparisons': fee_comparisons,
    },
    context_instance=RequestContext(request)
)

@client_user
def method_statement_templates(request):
    templates = MethodStatementTemplate.objects.all()
    stages = MethodStatementTemplateStage.objects.all().order_by('parent','number')

    return render_to_response('pricing/method_statement_templates.html', {
        'templates': templates,
        'stages': stages,
    },
    context_instance=RequestContext(request)
)

@client_user
def method_statements_for_template(request, for_template_id):
    template = get_object_or_404(MethodStatementTemplate, pk=for_template_id)
    template_stages = MethodStatementTemplateStage.objects.filter(parent=template).order_by('number')
    statements = MethodStatement.objects.filter(template=template).order_by('quoted_total')
    stages = MethodStatementStage.objects.filter(stage__in=template_stages).order_by('parent__quoted_total','stage__number')

    return render_to_response('pricing/method_statements_for_template.html', {
        'template': template,
        'template_stages':template_stages,
        'method_statement_stages': stages,
        'method_statements': statements,
    },
    context_instance=RequestContext(request)
)


@client_user
def method_statement_view(request,ms_id):
    ms = get_object_or_404(MethodStatement, pk=ms_id)
    stages = MethodStatementStage.objects.filter(parent=ms)
    lines = MethodStatementLine.objects.filter(stage__in=stages).order_by('stage','feecalc_line__fee__seniority')
    #l = len(lines)
    #l1 = lines[0]
    return render_to_response('pricing/method_statement.html', {
        'ms': ms,
        'stages': stages,
        'lines': lines
    },
    context_instance=RequestContext(request)
)

#===============================================================================
# ##------------AJAX views-------------------
#===============================================================================

@client_user
def ajax_fees(request):
    """returns a json fees table, with pk values, max 100"""
    if request.method == 'GET':
        form = MyModelForm(model=Fee, model_manager=Fee.typed_manager(0), data=request.GET)
        if form.is_valid():
            #used the form data to run a filter
            fees = form.get_queryset()
            #add a sort order if it's been submitted (note sort key not in form, so won't validate)
            if 'sort' in request.GET.keys() and request.GET['sort'] in (form.fields.keys()+['fee']):
                if hasattr(request.GET['sort'],'__iter__'): #if there's multiple sort choices
                    fees = fees.order_by(tuple(request.GET['sort']))
                else:
                    fees = fees.order_by(request.GET['sort'])
        else:
            # invalid form (probably some kind of hacking attempt, 
            # given that all forms are based on fixed choices
            fees = []

        #TODO: major DRY with fixed_fees view.  except for adding the cleaned_choices fee type...
        fees = fees[:100]#gets first 100 objects only
        output = serializers.serialize('json', fees)
        #return HttpResponse(output, mimetype="application/json")
        return HttpResponse(output, mimetype="text/plain") #for easier testing


def _get_bound_form(model_manager_name, chamber, request):
    """
    get the form corresponding to a model_manager_name string,
    by loading the appropriatte FilterTable
    """
    if model_manager_name == CD:
        form = ContactsTable(chamber).form
        form.updateAllDropdowns(request.GET)
    elif model_manager_name == BN:
        form = BarristersTable(chamber).form
        form.updateAllDropdowns(request.GET)
    else:
        model_manager = Fee.typed_manager(0)
        if model_manager_name:
            model_manager = managerOf(model_manager_name)
        if chamber:
            model_manager.add_filter(dict(chamber=chamber))
        form = DropDownsForm(model_manager=model_manager, data=request.GET)

    return form


#@profile("json.prof")
@client_user_or_get_legal_users_chamber
def json_dropdownfields(request, chamber, model_manager_name=''):
    """
    for use in AJAX queries.
    returns updated dropdown choices given a GET choices list
    """
    output = {}
    if request.method =='GET':
        form = _get_bound_form(model_manager_name, chamber, request)
        output = form.get_dropdownfields_for_ajax()

    #return HttpResponse(json.dumps(output), mimetype="application/json")
    return HttpResponse(json.dumps(output), mimetype="text/plain") #for easier testing



@login_required
def json_field_translations(request, model_manager_name=''):
    """ for use in ajax views,
    simply returns correspondences between pks and field descriptions for model's fields
    """
    if request.method == 'GET':
        output = {}

        if model_manager_name == CD:
            form = ContactsTable().form
        elif model_manager_name == BN:
            form = BarristersTable().form
        else:
            model_manager = Fee.objects
            if model_manager_name:
                model_manager = managerOf(model_manager_name)
            #form = MyModelForm(model=model_manager.model, model_manager=model_manager)
            form = DropDownsForm(model_manager=model_manager, data=request.GET)

        output = form.get_field_translations_for_ajax()
        json_output = json.dumps(output)
        return HttpResponse(json_output, mimetype="text/plain") #for easier testing


@client_user
def json_feecalculator_totals(request):
    output = {}
    if request.method == 'POST':
        ffs = FeeCalculatorFormSet(data=request.POST)
        #ffs.processFormSet()
        for f in ffs.forms:
            if f.find_single_fee():
                try:
                    fee = float(f.fee.fee)
                except:
                    fee = 'N/A'

                output[unicode(f.prefix)] = {'fee':fee,'total':f.total}

    else:
        pass

    return HttpResponse(json.dumps(output), mimetype="text/plain") #for easier testing    


def log_out(request):
    logout(request)
    return HttpResponseRedirect('/')


@legal_user_get_chamber_if_authorised
def chamber_dashboard(request, chamber):
    contacts = Chamber_Contacts.objects.filter(chamber=chamber)
    barristers = Barrister.objects.filter(chamber=chamber)
    fee_structures = FeeStructure.objects.filter(chamber=chamber)
    assignments = FeeStructureAssignment.objects.filter(fee_structure__in=fee_structures)
    submitted = Fee.objects.filter(chamber=chamber).count() > 0
    panels = Panel.objects.all()
    panel_assignments = {}
    panel_barristers = {}
    for panel in panels:
        panel_barristers[panel] = Barrister.objects.filter(chamber=chamber,panels=panel)
        this_panel_assignments = assignments.filter(panel=panel)
        if this_panel_assignments.filter(level_of_court=None):
            panel_assignments[panel] = 'Full'
        elif this_panel_assignments:
            panel_assignments[panel] = 'Partial'
        else:
            panel_assignments[panel] = 'Not applying'

    return render_to_response('pricing/chamber_dashboard.html', {
        'chamber': chamber,
        'contacts': contacts,
        'barristers': barristers,
        'fee_structures': fee_structures,
        'assignments': assignments,
        'panels': panels,
        'panel_assignments': panel_assignments,
        'panel_barristers': panel_barristers,
        'submitted' : submitted,
        },context_instance=RequestContext(request)
    )


@legal_user_get_chamber_if_authorised
def chamber_clients_view_preview(request, chamber):
    submitted = Fee.objects.filter(chamber=chamber).count() > 0
    return render_to_response('pricing/chamber_clients_view_preview.html', {
        'chamber': chamber,
        'submitted' : submitted,
        },context_instance=RequestContext(request)
    )

@legal_user_get_chamber_if_authorised
def chamber_contacts_enter(request, chamber):
    if request.method == 'GET':
        try:
            contacts = Chamber_Contacts.objects.get(chamber = chamber)
            form = EnterChamberContactsForm(instance=contacts)
        except Chamber_Contacts.DoesNotExist:
            form = EnterChamberContactsForm()
    else:
        form = EnterChamberContactsForm(request.POST)
        if form.is_valid():
            form.save(chamber)
            return HttpResponseRedirect(
                reverse('chamber_dashboard', args=(chamber.id,))
            )
    return render_to_response('pricing/chamber_contacts_enter.html', {
                'chamber': chamber,
                'form': form,
        },context_instance=RequestContext(request)
    )


@legal_user_get_chamber_if_authorised
def chamber_barrister_modify(request, chamber, barrister_id):
    barristers = Barrister.objects.filter(chamber=chamber)
    barrister = get_object_or_404(Barrister, pk=barrister_id, chamber=chamber)
    if request.method=='GET':
        form = BarristerForm(instance=barrister)
    else:
        form = BarristerForm(data=request.POST, instance=barrister)
        if form.is_valid():
            form.save(chamber=chamber)
            return HttpResponseRedirect(
                reverse('chamber_barristers_enter', args=(chamber.id,)))

    return render_to_response('pricing/chamber_barrister_modify.html', {
        'chamber': chamber,
         'barristers': barristers,
         'barrister_to_modify': barrister,
         'form': form
         },context_instance=RequestContext(request)
        )


@legal_user_get_chamber_if_authorised
def chamber_barrister_delete(request, chamber, barrister_id):
    barrister = get_object_or_404(Barrister, pk=barrister_id, chamber=chamber)
    if request.method=='POST' and 'delete' in request.POST:
        barrister.delete()
        return HttpResponseRedirect(
                reverse('chamber_barristers_enter', args=(chamber.id,)))


@legal_user_get_chamber_if_authorised
def chamber_barristers_enter(request, chamber):
    barristers = Barrister.objects.filter(chamber=chamber)
    if request.method == 'GET':
        form = BarristerForm()

    elif request.method == 'POST':
        form = BarristerForm(request.POST)
        if form.is_valid():
            form.save(chamber=chamber)
            return HttpResponseRedirect(
                reverse('chamber_barristers_enter', args=(chamber.id,)))

    return render_to_response(
            'pricing/chamber_barristers_enter.html',
            {'chamber': chamber,
             'barristers': barristers,
             'form': form},
            context_instance=RequestContext(request)
    )


@legal_user_get_chamber_if_authorised
def chamber_fee_structures(request, chamber):
    fee_structures = FeeStructure.objects.filter(chamber=chamber)
    panels = Panel.objects.all()
    fee_types = FeeType.objects.all()
    courts = Court.objects.all()
    if request.method=='POST':
        form = FeeStructureAssignmentForm(chamber, data=request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(
                    reverse('chamber_fee_structures',args=(chamber.id,)))
    else:
        form = FeeStructureAssignmentForm(chamber)
    return render_to_response(
            'pricing/chamber_fee_structures.html',
            {'chamber': chamber,
             'fee_types':fee_types,
             'panels':panels,
             'courts':courts,
             'form': form,
             'fee_structures': fee_structures, },
            context_instance=RequestContext(request)
    )


@legal_user_get_chamber_if_authorised
def chamber_fee_structure_edit(request, chamber, fee_structure_id=None, copy=False):
    if fee_structure_id:
        fee_structure = get_object_or_404(FeeStructure,
                pk=fee_structure_id, chamber=chamber)
    else:
        fee_structure=None
    if request.method == 'GET':
        form = FeeStructureForm(chamber=chamber, instance=fee_structure)
        if copy: form.initial['name'] = form.initial['name'] + ' (copy)'
    else:
        if copy: fee_structure = None
        form = FeeStructureForm(chamber=chamber, instance=fee_structure, data=request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(
                    reverse('chamber_fee_structures',args=(chamber.id,)))

    return render_to_response('pricing/chamber_fee_structure_edit.html', {
        'form': form,
        'chamber': chamber,
        }, context_instance=RequestContext(request)
    )



@legal_user_get_chamber_if_authorised
def chamber_fee_structure_delete(request, chamber, fee_structure_id):
    if request.method == "POST" and 'delete' in request.POST:
        fee_structure = get_object_or_404(FeeStructure,
            pk=fee_structure_id, chamber=chamber)
        fee_structure.delete()
        return HttpResponseRedirect(
            reverse('chamber_fee_structures',args=(chamber.id,)))


@legal_user_get_chamber_if_authorised
def chamber_submit_fee_data(request, chamber):
    if request.method == "POST" and 'submit' in request.POST:
        contacts = Chamber_Contacts.objects.filter(chamber=chamber)
        barristers = Barrister.objects.filter(chamber=chamber)
        fee_structures = FeeStructure.objects.filter(chamber=chamber)
        assignments = FeeStructureAssignment.objects.filter(fee_structure__in=fee_structures)
        if contacts and barristers and fee_structures and assignments :
            for assignment in FeeStructureAssignment.objects.filter(fee_structure__chamber=chamber):
                assignment.convert_to_fees()
            return HttpResponseRedirect(
                reverse('chamber_clients_view_preview',args=(chamber.id,)))
        else:
            return HttpResponseRedirect(
                reverse('chamber_dashboard', args=(chamber.id,)))


