from pricing.test_utils import MyTestCase
from pricing.tests_chambers_data_input import *
from pricing.test_functions import *

try:
    import json
except:
    import simplejson as json
import re
import time

from django.test import Client
from django.http import HttpRequest
from pricing.models import (
    Court, Fee, FeeType, Panel, ProfessionalType, Seniority, WorkType,
    User, Group,
    FF, HF
)
from pricing.forms import DropdownsForm, FeeCalculatorFormSet

FIXTURES_FILES = ['nwlc_data_subset.json']

class NewTestCase(MyTestCase):
    fixtures = FIXTURES_FILES

    def setUp(self):
        group = Group()
        group.name = 'Client'
        group.save()
        self.user = User()
        self.user.username = 'test_client_user'
        self.user.set_password('password')
        self.user.save()
        self.user.groups.add(group)
        self.user.save()
        self.client = Client()
        self.assertTrue(
            self.client.login(
                username=self.user.username,
                password='password')
        )
        self.request = HttpRequest
        self.request.method = 'GET'
        self.request.user = self.user



class RegressionTest(NewTestCase):
    dropdowns = {
            "framework_panel": ["", "1", "3", "6", "7", "10", "11", "15", "16", "18", "20", "22", "24", "25"],
            "professional_type": ["", "1"],
            "type_of_work": ["", "2", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "18", "19", "20"],
            "fee_type": ["", "1", "2"],
            "chamber": ["", "1", "8", "13"],
            "level_of_court": ["", "1", "2", "3", "4", "5", "6", "7", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"],
            "seniority": ["", "1", "2", "4", "3", "6"]
    }
    params = {
        'chamber': Chamber,
        'framework_panel': Panel,
        'level_of_court': Court,
        'seniority': Seniority,
        'type_of_work': WorkType,
        'fee_type': FeeType,
        'professional_type': ProfessionalType
    }
    translations = {
            "framework_panel": {"": "...(All)", "1": "Administrative", "3": "Civil Litigation", "6": "Community Care", "7": "Corporate Governance", "10": "Education", "11": "Employment", "15": "Housing", "16": "Licensing", "18": "Mental Health", "20": "Planning & Environment", "22": "Police", "24": "Procurement", "25": "Property"},
            "professional_type": {"": "...(All)", "1": "Barristers"},
            "type_of_work": {"": "...(All)", "2": "1. Directions and Conferences", "7": "1. No fixed fees - only hourly rates", "8": "2. Brief fee for half day hearing", "9": "3. Brief fee for full day hearing", "10": "4. Refresher fee for full day hearing", "11": "5. Brief fee for 3-4 day hearing", "12": "6. Refresher fee for 3-4 day hearing", "13": "7. Brief fee for 5-6 day hearing", "14": "8. Refresher fee for 5-6 day hearing", "15": "9. Daily uplift for longer cases", "16": "1. Advocacy", "18": "3. Reading / Preparation", "19": "4. Drafting / Advice", "20": "5. Travel"},
            "fee_type": {"": "...(All)", "1": "Barristers Fixed", "2": "Barristers Hourly"},
            "chamber": {"": "...(All)", "1": "11 Kings Bench Walk", "13": "Field Court Chambers", "8": "Arden Chambers"},
            "level_of_court": {"": "...(All)", "1": "Advice to Education Appeal Panels (Admission and Exclusion)", "2": "Appeals to Magistrates Court", "3": "County Court", "4": "County Court / Principal Registry", "5": "Crown Court", "6": "Employment Appeals Tribunal", "7": "Employment Tribunal", "9": "High Court", "10": "High Court (Judicial Review & Appeals from the SEN Tribunal)", "11": "High Court (Judicial Review & Statutory Appeals)", "12": "High Court (Judicial Review)", "13": "Magistrates Court", "14": "Mental Health Tribunal", "15": "N/A", "16": "Public Inquiry", "17": "SEN Tribunal", "18": "Upper Tribunal"},
            "seniority": {"": "...(All)", "1": "0-1 year call", "2": "1-5 years call", "3": "11+ years call", "4": "6-10 years call", "6": "Queen's Counsel"},
            }
    fee_calc_query = {
            'form-TOTAL_FORMS': ['5'],
            'form-INITIAL_FORMS': ['0'],
            'form-MAX_NUM_FORMS': [''],
            #'csrfmiddlewaretoken': ['75101f1cd1ac38bd6f37f0702a413406'],
            'form-0-chamber': ['1'],
            'form-0-fee_type': ['1'],
            'form-0-framework_panel': ['6'],
            'form-0-level_of_court': ['4'],
            'form-0-professional_type': ['1'],
            'form-0-quantity': ['3'],
            'form-0-seniority': ['4'],
            'form-0-type_of_work': ['11'],
            'form-1-chamber': ['1'],  #form 1 has 1 result
            'form-1-fee_type': ['2'],
            'form-1-framework_panel': ['6'],
            'form-1-level_of_court': ['4'],
            'form-1-professional_type': ['1'],
            'form-1-quantity': ['10'],
            'form-1-seniority': ['6'],
            'form-1-type_of_work': ['18'],
            'form-2-chamber': ['1'],  # form 2 has none cos no fee_type=2
            'form-2-fee_type': [''],
            'form-2-framework_panel': ['6'],
            'form-2-level_of_court': [''],
            'form-2-professional_type': ['1'],
            'form-2-quantity': [''],
            'form-2-seniority': [''],
            'form-2-type_of_work': [''],
            'form-3-chamber': ['1'],   #form 3 has many
            'form-3-fee_type': [''],
            'form-3-framework_panel': ['6'],
            'form-3-level_of_court': [''],
            'form-3-professional_type': ['1'],
            'form-3-quantity': [''],
            'form-3-seniority': [''],
            'form-3-type_of_work': [''],
            'form-4-chamber': ['1'],
            'form-4-fee_type': [''],
            'form-4-framework_panel': ['6'],
            'form-4-level_of_court': [''],
            'form-4-professional_type': ['1'],
            'form-4-quantity': [''],
            'form-4-seniority': [''],
            'form-4-type_of_work': [''],
    }
    fee_comp_query = {
                'form-TOTAL_FORMS': ['5'],
                'form-INITIAL_FORMS': ['0'],
                'form-MAX_NUM_FORMS': [''],
                #'csrfmiddlewaretoken': ['75101f1cd1ac38bd6f37f0702a413406'],
                'form-0-fee_type': ['1'],
                'form-0-framework_panel': ['10'],
                'form-0-level_of_court': ['3'],
                'form-0-professional_type': ['1'],
                'form-0-quantity': ['1'],
                'form-0-seniority': ['3'],
                'form-0-type_of_work': ['9'],
                'form-1-fee_type': ['1'],
                'form-1-framework_panel': ['10'],
                'form-1-level_of_court': ['3'],
                'form-1-professional_type': ['1'],
                'form-1-quantity': ['1'],
                'form-1-seniority': ['3'],
                'form-1-type_of_work': ['10'],
                'form-2-fee_type': ['2'],
                'form-2-framework_panel': ['10'],
                'form-2-level_of_court': ['17'],
                'form-2-professional_type': ['1'],
                'form-2-quantity': ['5'],
                'form-2-seniority': ['6'],
                'form-2-type_of_work': ['16'],
                'form-3-fee_type': [''],
                'form-3-framework_panel': ['10'],
                'form-3-level_of_court': [''],
                'form-3-professional_type': ['1'],
                'form-3-quantity': [''],
                'form-3-seniority': [''],
                'form-3-type_of_work': [''],
                'form-4-fee_type': [''],
                'form-4-framework_panel': ['10'],
                'form-4-level_of_court': [''],
                'form-4-professional_type': ['1'],
                'form-4-quantity': [''],
                'form-4-seniority': [''],
                'form-4-type_of_work': [''],
                'parent-author': [''],
                'parent-name': [''],
                'submit-line-form-2': ['Go'],
    }


    def test_dropdowns(self):
        response = self.client.get('/json/dropdownfields/')
        self.assert_basic_dropdowns(response)

    def assert_basic_dropdowns(self, response):
        json_dict = json.loads(response.content)
        self.assertEquals(json_dict, self.dropdowns)
        expected_dict = {}
        for param, model in self.params.items():
            expected_dict[param] = [
                    unicode(item.id)
                    for item in model.objects.all()
                    if Fee.objects.filter(**{param:item.id})
            ]
            expected_dict[param].insert(0, u'')

        self.assertEquals(json_dict, expected_dict)


    def test_invalid_choices_on_one_field_returns_all_choices_for_that_field_nothing_for_others(self):
        response = self.client.get('/json/dropdownfields/?chamber=200')
        expected_dict  = self.dropdowns
        for param in self.params:
            if param != 'chamber':
                expected_dict[param] = [u'']
        self.assertEquals(json.loads(response.content), expected_dict)


    def test_translations(self):
        response = self.client.get('/json/field_translations/')
        json_dict = json.loads(response.content)
        self.assertEquals(json_dict, self.translations)
        expected_dict = {}
        for param, model in self.params.items():
            expected_dict[param] = {}
            for item in model.objects.all():
                if Fee.objects.filter(**{param:item}):
                    expected_dict[param][unicode(item.id)]=item.name
            expected_dict[param][u''] = "...(All)"

        self.assertEquals(json_dict, expected_dict)


    def assertResponseContainsOptionsFrom(self, response, expected_html):
        option_finder = re.compile('<select(.*?)</select', re.DOTALL)
        for option in option_finder.findall(expected_html):
            self.assertContains(response, option)


    def test_typed_fees_lots(self):
        response = self.client.get('/all_fees/?framework_panel=3&sort=fee')
        source = open('pricing/fixtures/test_most_fees_data.test')
        expected = source.read()
        source.close()
        for line in expected.split('\n'):
            trimmed_line = line.strip()
            if trimmed_line:
                self.assertContains(response, trimmed_line)
        self.assertResponseContainsOptionsFrom(response, expected)


    def test_typed_fees_filtered(self):
        response = self.client.get(
            '/fixed_fees/?framework_panel=3&level_of_court=9&type_of_work=8&seniority=4&sort=fee'
        )
        source = open('pricing/fixtures/test_filtered_fees_data.test')
        expected = source.read()
        source.close()
        for line in expected.split('\n'):
            trimmed_line = line.strip()
            if trimmed_line:
                self.assertContains(response, trimmed_line)

        self.assertResponseContainsOptionsFrom(response, expected)

    def test_fee_calculator(self):
        response = self.client.post(
            '/invoice_calculator/',
            data=self.fee_calc_query
        )
        source = open('pricing/fixtures/test_fee_calculator.test')
        expected = source.read()
        source.close()
        for line in expected.split('\n'):
            trimmed_line = line.strip()
            if trimmed_line:
                self.assertContains(response, trimmed_line)
        self.assertResponseContainsOptionsFrom(response, expected)


    def test_fee_comparison(self):
        response = self.client.post(
            '/fee_comparison_setup_new/',
            data=self.fee_comp_query
        )
        source = open('pricing/fixtures/test_fee_comparison.test')
        expected = source.read()
        source.close()
        for lines in expected.split('\n'):
            if lines.strip():
                self.assertContains(response, lines.strip())

        self.assertResponseContainsOptionsFrom(response, expected)


class TestDropdownsForm(MyTestCase):
    fixtures = FIXTURES_FILES

    def test_form_choices_no_data(self):
        ddform = DropdownsForm(model_manager=Fee.objects, data={})
        for param, model in RegressionTest.params.items():
            expected_choices = []
            for item in model.objects.all():
                if Fee.objects.filter(**{param:item}):
                    expected_choices.append((item.id, item.name))

            expected_choices.insert(0, ('', '...(All)'))
            self.assertEquals(ddform.fields[param].choices, expected_choices)


    def test_form_choices_with_model_manager(self):
        ddform = DropdownsForm(model_manager=Fee.typed_manager(HF), data={})
        for param, model in RegressionTest.params.items():
            expected_choices = []
            for item in model.objects.all():
                if Fee.typed_manager(HF).filter(**{param:item}):
                    expected_choices.append((item.id, item.name))
            expected_choices.insert(0, ('', '...(All)'))
            self.assertEquals(ddform.fields[param].choices, expected_choices)


    def test_form_choices_with_model_manager_and_data(self):
        data = QueryDict('chamber=1&chamber=2&framework_panel=3')
        ddform = DropdownsForm(model_manager=Fee.typed_manager(HF), data=data)
        print ddform.fields['type_of_work'].choices

        queryset =Fee.typed_manager(HF).filter(chamber__in=[1,2],framework_panel=3)
        for param, model in RegressionTest.params.items():
            expected_choices = []
            for item in model.objects.all():
                if param == 'chamber':
                    check = Fee.typed_manager(HF).filter(framework_panel=3).filter(**{param:item}).count()
                elif param == 'framework_panel':
                    check = Fee.typed_manager(HF).filter(chamber__in=[1,2]).filter(**{param:item}).count()
                    print item, check
                else:
                    check = queryset.filter(**{param:item}).count()
                if check:
                    expected_choices.append((item.id, item.name))
            expected_choices.insert(0, ('', '...(All)'))
            self.assertEquals(ddform.fields[param].choices, expected_choices)


    def test_dropdowns_for_fee_calculator(self):
        partial_prefixed_dict = {
                'form-0-seniority': ['4'],
                'form-0-framework_panel': ['6'],
                'form-0-fee_type': ['1'],
                'form-0-quantity': ['3'],
        }
        ddform = DropdownsForm(model_manager=Fee.typed_manager(FF), data=partial_prefixed_dict)
        dropdowns = ddform.get_dropdownfields_for_ajax()

        unprefixed_dict = {}
        for k, v in partial_prefixed_dict.items():
            unprefixed_dict[k.replace('form-0-','')] = v[0]
        del unprefixed_dict['quantity']

        expected_dict = {}
        for param, model in RegressionTest.params.items():
            this_field_query = {}
            this_field_query.update(unprefixed_dict)
            if param in unprefixed_dict:
                del this_field_query[param]
            this_field_queryset = Fee.typed_manager(FF).filter(**this_field_query)
            expected_dict[param] = [
                    unicode(item.id)
                    for item in model.objects.all()
                    if this_field_queryset.filter(**{param:item.id})
            ]
            expected_dict[param].insert(0, u'')

        self.assertEquals(dropdowns, expected_dict)



class TestFeeCalculator(MyTestCase):
    fixtures = FIXTURES_FILES

    def test_fee_calculator_with_query(self):
        query = RegressionTest.fee_calc_query

        ffs = FeeCalculatorFormSet(data=query)
        #form 0 is a no match, should show all choices
        print 'form0'
        print ffs.forms[0].fields['chamber'].choices

        #form 1 is a single fee
        for f in RegressionTest.params:
            print 'form 1 choices for %s' % f
            print ffs.forms[1].fields[f].choices




class DropdownsPerf(NewTestCase):
    def test_multiple_basic(self):
        t = time.time()
        for x in range(20):
            self.client.get('/json/dropdownfields/')
        u = time.time()
        print u-t
        self.assertTrue(u-t < 3.8)


